name: Taskforce Mailer Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Rayvical
          POSTGRES_DB: taskforce_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts

      - name: Setup environment variables
        run: |
          cp env.example .env
          sed -i 's#^DATABASE_URL=.*#DATABASE_URL=postgresql://postgres:Rayvical@localhost:5432/taskforce_test#' .env || echo "DATABASE_URL=postgresql://postgres:Rayvical@localhost:5432/taskforce_test" >> .env
          sed -i 's#^REDIS_URL=.*#REDIS_URL=redis://localhost:6379#' .env || echo "REDIS_URL=redis://localhost:6379" >> .env
          sed -i 's#^JWT_SECRET=.*#JWT_SECRET=test-jwt-secret-key#' .env || echo "JWT_SECRET=test-jwt-secret-key" >> .env
          sed -i 's#^GMAIL_CLIENT_ID=.*#GMAIL_CLIENT_ID=test-client-id#' .env || echo "GMAIL_CLIENT_ID=test-client-id" >> .env
          sed -i 's#^GMAIL_CLIENT_SECRET=.*#GMAIL_CLIENT_SECRET=test-client-secret#' .env || echo "GMAIL_CLIENT_SECRET=test-client-secret" >> .env
          sed -i 's#^OPENROUTER_API_KEY=.*#OPENROUTER_API_KEY=test-api-key#' .env || echo "OPENROUTER_API_KEY=test-api-key" >> .env
          sed -i 's#^CONSENT_CONTENT=.*#CONSENT_CONTENT=false#' .env || echo "CONSENT_CONTENT=false" >> .env

      - name: Build packages
        run: pnpm build

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... ($i/30)"
            sleep 2
          done

      - name: Run database migrations
        working-directory: apps/backend
        env:
          DATABASE_URL: postgresql://postgres:Rayvical@localhost:5432/taskforce_test
        run: pnpm prisma migrate deploy

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:Rayvical@localhost:5432/taskforce_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key
          GMAIL_CLIENT_ID: test-client-id
          GMAIL_CLIENT_SECRET: test-client-secret
          OPENROUTER_API_KEY: test-api-key
          CONSENT_CONTENT: false
        run: pnpm test:ci

      - name: Run linting
        run: pnpm lint

  build-windows:
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts

      - name: Build application
        run: pnpm build

      - name: Install Electron Builder
        run: pnpm add -D electron electron-builder -w

      - name: Create Windows installer
        run: |
          cd electron-app
          npm install
          npx electron-builder --win nsis --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: electron-app/dist/*.exe

  build-macos:
    runs-on: macos-latest
    needs: test
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts

      - name: Build application
        run: pnpm build

      - name: Install Electron Builder
        run: pnpm add -D electron electron-builder -w

      - name: Create macOS installer
        run: |
          cd electron-app
          npm install
          npx electron-builder --mac dmg zip --${{ matrix.arch }} --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer-${{ matrix.arch }}
          path: electron-app/dist/*.{dmg,zip}

  build-linux:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts

      - name: Build application
        run: pnpm build

      - name: Install Electron Builder
        run: pnpm add -D electron electron-builder -w

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot rpm

      - name: Create Linux installer
        run: |
          cd electron-app
          npm install
          npx electron-builder --linux AppImage deb --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: electron-app/dist/*.{AppImage,deb}

  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: windows/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer-x64
          path: macos-x64/
      
      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-installer-arm64
          path: macos-arm64/

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-installer
          path: linux/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ðŸš€ Taskforce Mailer ${{ github.ref_name }} - Ready to Install
          body_path: RELEASE_NOTES_v5.0.6.md
          draft: false
          prerelease: false
          files: |
            windows/**/*
            macos-x64/**/*
            macos-arm64/**/*
            linux/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

