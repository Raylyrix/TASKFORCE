// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant organization structure
model Organization {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  settings  Json?    // Organization-specific settings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users        User[]
  teams        Team[]
  mailboxes    Mailbox[]
  analytics    AnalyticsAggregate[]
  aiRequests   AIRequest[]
  reports      Report[]
  rules        AutomationRule[]

  @@map("organizations")
}

// User management with RBAC
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  avatar         String?
  role           UserRole  @default(VIEWER)
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  preferences    Json?     // User UI preferences
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamMemberships TeamMembership[]
  auditLogs      AuditLog[]
  reports        Report[]

  @@map("users")
}

// Team structure for collaboration
model Team {
  id             String   @id @default(cuid())
  name           String
  description    String?
  department     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TeamMembership[]
  mailboxes      Mailbox[]

  @@map("teams")
}

model TeamMembership {
  id        String       @id @default(cuid())
  role      TeamRole     @default(MEMBER)
  joinedAt  DateTime     @default(now())

  // Relations
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    String
  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_memberships")
}

// Email provider connections
model Mailbox {
  id             String        @id @default(cuid())
  email          String
  provider       EmailProvider
  providerId     String        // Provider-specific ID
  displayName    String?
  isActive       Boolean       @default(true)
  lastSyncAt     DateTime?
  syncCursor     String?       // For incremental sync
  settings       Json?         // Provider-specific settings
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  teamId         String?
  team           Team?         @relation(fields: [teamId], references: [id])
  messages       Message[]
  threads        Thread[]
  contacts       Contact[]

  @@unique([email, organizationId])
  @@map("mailboxes")
}

// Email messages metadata
model Message {
  id            String      @id @default(cuid())
  messageId     String      // Provider message ID
  threadId      String?     // Provider thread ID
  subject       String?
  fromEmail     String
  fromName      String?
  toEmails      String[]    // Array of recipient emails
  ccEmails      String[]    @default([])
  bccEmails     String[]    @default([])
  receivedAt    DateTime
  sentAt        DateTime?
  size          Int?        // Message size in bytes
  hasAttachments Boolean    @default(false)
  attachmentCount Int?      @default(0)
  isRead        Boolean     @default(false)
  isImportant   Boolean     @default(false)
  labels        String[]    @default([]) // Gmail labels or Outlook categories
  snippet       String?     // Email preview snippet
  bodyHash      String?     // Hash of email body for deduplication
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  mailboxId     String
  mailbox       Mailbox     @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
  thread        Thread?     @relation(fields: [threadId], references: [id])
  contacts      MessageContact[]
  aiAnalysis    AIAnalysis[]

  @@unique([messageId, mailboxId])
  @@index([receivedAt])
  @@index([fromEmail])
  @@index([threadId])
  @@map("messages")
}

// Email threads/conversations
model Thread {
  id                String    @id @default(cuid())
  threadId          String    // Provider thread ID
  subject           String?
  messageCount      Int       @default(1)
  lastMessageAt     DateTime
  isResolved        Boolean   @default(false)
  responseTime      Int?      // Response time in minutes
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  mailboxId         String
  mailbox           Mailbox   @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
  messages          Message[]

  @@unique([threadId, mailboxId])
  @@index([lastMessageAt])
  @@map("threads")
}

// Contact management
model Contact {
  id                String    @id @default(cuid())
  email             String
  name              String?
  domain            String?   // Extracted from email domain
  isInternal        Boolean   @default(false)
  responseRate      Float?    // Calculated response rate
  avgResponseTime   Int?      // Average response time in minutes
  lastContactAt     DateTime?
  contactCount      Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  mailboxId         String
  mailbox           Mailbox   @relation(fields: [mailboxId], references: [id], onDelete: Cascade)
  messages          MessageContact[]

  @@unique([email, mailboxId])
  @@index([domain])
  @@map("contacts")
}

// Junction table for message-contacts relationship
model MessageContact {
  id        String   @id @default(cuid())
  role      ContactRole @default(TO) // TO, CC, BCC, FROM

  // Relations
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([messageId, contactId, role])
  @@map("message_contacts")
}

// Pre-computed analytics aggregates
model AnalyticsAggregate {
  id             String    @id @default(cuid())
  date           DateTime  @db.Date
  metric         String    // 'volume', 'response_time', 'contact_health', etc.
  value          Float
  metadata       Json?     // Additional metric-specific data
  createdAt      DateTime  @default(now())

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, date, metric])
  @@index([date])
  @@index([metric])
  @@map("analytics_aggregates")
}

// AI analysis results
model AIAnalysis {
  id              String      @id @default(cuid())
  analysisType    AnalysisType
  result          Json        // AI analysis result
  confidence      Float?      // Confidence score 0-1
  model           String      // AI model used
  promptHash      String      // Hash of prompt for caching
  processingTime  Int?        // Processing time in ms
  createdAt       DateTime    @default(now())

  // Relations
  messageId       String
  message         Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([analysisType])
  @@index([promptHash])
  @@map("ai_analyses")
}

// AI request logging
model AIRequest {
  id              String      @id @default(cuid())
  promptHash      String      // SHA256 hash of prompt
  model           String
  tokensUsed      Int?
  cost            Float?      // Cost in USD
  responseTime    Int?        // Response time in ms
  success         Boolean
  errorMessage    String?
  createdAt       DateTime    @default(now())

  // Relations
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([promptHash])
  @@index([createdAt])
  @@map("ai_requests")
}

// Automation rules
model AutomationRule {
  id              String      @id @default(cuid())
  name            String
  description     String?
  conditions      Json        // Rule conditions
  actions         Json        // Rule actions
  isActive        Boolean     @default(true)
  lastTriggeredAt DateTime?
  triggerCount    Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("automation_rules")
}

// Generated reports
model Report {
  id              String      @id @default(cuid())
  name            String
  type            ReportType
  template        String?     // Report template used
  data            Json        // Report data
  filePath        String?     // Path to generated file
  fileSize        Int?        // File size in bytes
  isScheduled     Boolean     @default(false)
  scheduledAt     DateTime?
  generatedAt     DateTime    @default(now())

  // Relations
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  generatedById   String
  generatedBy     User        @relation(fields: [generatedById], references: [id])

  @@map("reports")
}

// Audit logging for compliance
model AuditLog {
  id              String      @id @default(cuid())
  action          String      // Action performed
  resource        String      // Resource affected
  resourceId      String?     // ID of affected resource
  details         Json?       // Additional details
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime    @default(now())

  // Relations
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// Enums
enum UserRole {
  VIEWER
  ANALYST
  MANAGER
  ADMIN
  OWNER
}

enum TeamRole {
  MEMBER
  LEAD
  ADMIN
}

enum EmailProvider {
  GMAIL
  OUTLOOK
  EXCHANGE
}

enum ContactRole {
  FROM
  TO
  CC
  BCC
}

enum AnalysisType {
  PRIORITY
  SENTIMENT
  SUMMARY
  TASK_EXTRACTION
  CATEGORIZATION
  SMART_REPLY
}

enum ReportType {
  WEEKLY
  MONTHLY
  QUARTERLY
  CUSTOM
  EXECUTIVE
}
